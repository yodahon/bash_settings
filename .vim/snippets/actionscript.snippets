# package
snippet package
	package${1: PackageName}
	{
		public class ${2:className} ${3:extends parentName}
		{
			public function $2()
			{
				${4}
			}
		}
	}

# var
snippet var
	var ${1:name}:${2:Type} = ${3:new $2}${4:()};${5}
# pri
snippet pri
	${1:private} ${2:var} ${3:name}:${4:type};${5}
# pro
snippet pro
	${1:protected} ${2:var} ${3:name}:${4:type};${5}
# pub
snippet pub
	${1:public} ${2:var} ${3:name}:${4:type};${5}

# Function
snippet function
	${1:public} function ${2:functionName}(${3:argument}):${4:void} 
	{
		${5}
	}
snippet fun
	${1:public} function ${2:functionName}(${3:argument}):${4:void} 
	{
		${5}
	}
# Anonymous Function
snippet f
	function(${1}):${2:*}
	{
		${3}
	};
# if
snippet if
	if (${1:true})
	{
		${2}
	}
# elif
snippet elif
	else if (${1:true})
	{
		${2}
	}
# if ... else
snippet ife
	if (${1:true})
	{
		${2}
	}
	else
	{
		${3}
	};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression})
	{
		case ${3:case}:
		{
			${4}
			break;
		}
		default:
		{
			${2}
		}
	}
# case
snippet case
	case ${1:case}:
	{
		${2}
		break;
	}
# for (...) {...}
snippet for
	var ${1:limit}:int = ${2:elements.length};
	for (var ${3:i}:int = 0; $3 < $1; $3++)
	{
		${4}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	var ${1:n}:int = ${2:elements}.length;
	for (var ${3:i}:int = $1 - 1; $3 >= $1; $3++)
	{
		${4:$1[$2]}
	};
# for each
snippet foreach
	for each(var ${1:value}:${2:Type} in ${3:elements})
	{
		${4:$1}
	}
# for in
snippet forin
	for (var ${1:index}:${2:IndexType} in ${3:object})
	{
		var value:* =${4:$3[$1]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) 
	{
		${2:/* code */}
	}
# do...while
snippet do
	do 
	{
		${2:/* code */}
	}
	while (${1:/* condition */});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# addEventListener
snippet add
	addEventListener( ${1:Event}, ${2:function} );${3}

# vim: set fdm=manual:
